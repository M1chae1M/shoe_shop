import React, {Component} from "react";
import fetch from 'node-fetch';
import HOC,{Store} from "../HOC";
import {glbl} from "../_app";
import ImgFrame from "../ImgFrame";
import GreenBTN from "../GreenBTN";
import Number from "../Number";
import Router from "next/router";
import SelectC, {OptionC} from "../SelectC";
import Link from "next/link";

// // export async function getStaticPaths(){
// //   const products=await fetch(`${process.env.NEXT_PUBLIC_API_URL}products`);
// //   const data=await products.json();
// //   const paths=data.resp.map((product)=>({
// //     params:{boot:product.id.toString()},
// //   }));
// //   return{
// //     paths,
// //     fallback:false,
// //   };
// // }

// // export async function getStaticProps(ctx){
// //   const res=await fetch(`${process.env.NEXT_PUBLIC_API_URL}singleProduct`,{
// //       method:'POST',
// //     headers:{'Content-Type':'application/json'},
// //     body:JSON.stringify({id:ctx.params.boot})
// //   })
// //   .then(resp=>resp.json())
// //   .then(resp=>resp.resp);
// //   const data=res;
// //   return{props:{data}}
// // }


// export async function getStaticPaths(){
//   return{
//     paths:[{params:{boot:'15'}}],
//     fallback:true,
//   };
// }

// export async function getStaticProps(context){
//   const {boot}=context.params;
//   return{props:{boot}}
// }

// export class Boot extends Component{
//   state={
//     // sizeState:this.props.data.sizes.split(',')[0],
//     howMany:1,
//   }
//   render(){
//     // const {data}=this.props;
//     // const {id,image,sex,description,category,name,price,quantity,sizes}=data;
//     // const {sizeState,howMany}=this.state;
//     const styles={
//       Product:{
//         width:'70vw',
//         padding:'5px',
//         display:'grid',
//         justifyItems:'center',
//         alignItems:'center',
//       },
//       btn:{
//         width:'fit-content',
//         padding:'5px',
//       },
//       description:{
//         width:glbl._width,
//         padding:'5px',
//       },
//       path:{
//         padding:'5px',
//       },
//       Link:{
//         color:'black',
//         textDecoration:'none',
//       },
//       change:{
//         display:'grid',
//         gridAutoFlow:'column',
//         justifyItems:'center',
//         alignItems:'center',
//       },
//     }
//     // const changeHowMany=(change)=>{
//     //   const value=howMany+change;
//     //   if(value<=quantity && value>0){
//     //     this.setState({howMany:value});
//     //   }
//     // }
//     // const addToCartNewBoot=()=>{
//     //   Router.push('/');
//     //   return {id,name,image,price,howMany,sizeState,time:new Date().getTime()}
//     // }
//     // const onChange=(e)=>this.setState({sizeState:e.target.value})
//     // const links=[
//     //   {href:'/',text:'Boots > '},
//     //   {href:`/?sex=${sex}`,text:`${sex} > `},
//     //   {href:`/?type=${category}`,text:`${category} > `},
//     //   {href:`/products/${id}`,text:name},
//     // ]
//     return(
//       <Store.Consumer>
//       {value=>{
//         // const {saveToLocalStorage}=value??{};
//         // const addToCart=(e)=>{
//         //   saveToLocalStorage(e,addToCartNewBoot())
//         // }
//         return(
//           <div style={styles.Product}>
//             {/* <div style={styles.path}>
//               {links.map(({href,text})=><Link key={text} style={styles.Link} href={href}>{text}</Link>)}
//             </div>
//             <ImgFrame src={image} alt='' x={glbl._img_height} y={glbl._img_height}/>
//             <div style={styles.description}>{description}</div>
//             <div style={styles.path}>Price: {price} PLN</div>
//             <div style={styles.path}>
//               {'Sizes: '}
//               <SelectC value={sizeState} onChange={onChange} className="GreenBTN">
//                 {sizes.split(',').map(x=><OptionC key={x} value={x}>{x}</OptionC>)}
//               </SelectC>
//             </div>
//             <div style={styles.path}>Available quantity: {quantity}</div>
//             <div style={{...styles.path,...styles.change}}>
//               how many boots you need?
//               <Number value={howMany} onChange={changeHowMany}/>
//             </div>
//             <div style={styles.btn}>
//               <GreenBTN value='Add to cart' onClick={addToCart} className="GreenBTN"/>
//             </div> */}
//           </div>
//         )
//       }}
//       </Store.Consumer>
//     )
//   }
// }

// export default HOC(Boot);


export async function getStaticPaths(){
  return{
    paths:[{params:{boot:'15'}}],
    fallback:true,
  };
}

export async function getStaticProps(context){
  const {boot}=context.params;
  return{props:{boot}}
}

// let task;

class Boot extends Component{
  // state={
  //   data:[],
  // }
  // componentDidMount(){
  //   this.fetchOrder(this)
  // }
  // componentDidUpdate(){
  //     this.fetchOrder(this);
  //     if(task) clearTimeout(task)
  //     task=setTimeout(()=>{
  //       if(this.state.data.length<1){
  //         Router.push('/profile')
  //       }
  //     },1000)
  // }
  // shouldComponentUpdate(prevProps, prevState){
  //   const condition1=JSON.stringify(prevState.data)!==JSON.stringify(this.state.data)
  //   const condition2=this.props.order!==prevProps.order
  //   if(condition1||condition2) return true
  //   return false
  // }
  // fetchOrder(comp){
  //   (async function(){
  //     if(localStorage?.getItem('token')){
  //       const {order}=comp.props;
  //       const token=await localStorage.getItem('token')
  //       const res=await fetch(`${process.env.NEXT_PUBLIC_API_URL}singleOrder`,{
  //         method:'POST',
  //         headers:{'Content-Type':'application/json'},
  //         body:JSON.stringify({token,id:order})
  //       })
  //       .then(res=>res.json())
  //       .then(({data})=>{
  //         comp.setState({data:data})
  //       })
  //     }
  //   })()
  // }
  render(){
    // const {data}=this.state;
    // const order_cart=data?.order_cart?JSON.parse(data.order_cart):[];
    // const styles={
    //   product:{
    //     display:'grid',
    //     alignItems:'center',
    //     justifyItems:'center',
    //     gridTemplateColumns:'70px auto',
    //     border:'solid black 1px',
    //     margin:'3px 0px',
    //     padding:'5px 3px',
    //   },
    //   productList:{
    //     display:'grid',
    //     justifyItems:'center',
    //     alignItems:'center',
    //     minHeight:'110px',
    //     maxHeight:'130px',
    //     overflowY:'scroll',
    //     overflowY:'auto',
    //     padding:'0px 3px',
    //     width:'fit-content',
    //   },
    //   order:{
    //     position:'relative',
    //     padding:'18px',
    //   },
    //   backBTN:{
    //     cursor:'pointer',
    //     top:'0%',
    //     left:'0%',
    //     position:'absolute',
    //     color:'black',
    //     fontSize:'18px',
    //     transition:'all 0.125s ease-in-out',
    //     fontWeight:'bold',
    //   },
    //   table:{
    //     table:{
    //       textAlign:'center',
    //     },
    //     td:{
    //       border:'solid black 1px',
    //       padding:'5px',
    //     },
    //     tr:{
    //       cursor:'pointer',
    //       width:'100%',
    //       transition:'all 0.125s ease-in-out',
    //     },
    //   }
    // }
    // const totalPrice=(order_cart?order_cart?.reduce((acc, elem)=>acc+elem.price*elem.howMany,0):0).toFixed(2);
    return(
      <div>
        {/* <Link href='/profile'>
          <HiOutlineArrowUturnLeft style={styles.backBTN} id="backBTN"/>
        </Link>
        <table style={styles.table.table} cellSpacing={1}>
          <thead>
            <tr>
              <td style={styles.table.td}>Date</td>
              <td style={styles.table.td}>State</td>
              <td style={styles.table.td}>Order</td>
              <td style={styles.table.td}>Total</td>
            </tr>
          </thead>
          <tbody>
            <tr style={styles.table.tr}>
              <td style={styles.table.td}>{new Date(data.date).toLocaleString()}</td>
              <td style={styles.table.td}>{data.state}</td>
              <td style={styles.table.td}>
                <div style={styles.productList}>
                  {order_cart.map((x,i)=>
                    <div key={i} style={styles.product}>
                      <ImgFrame src={x.image} alt={`image of ${x.name}`} x='60px' y='40px'/>
                      <div>{x.howMany} * {x.price}</div>
                    </div>
                  )}
                </div>
              </td>
              <td style={styles.table.td}>{totalPrice} PLN</td>
            </tr>
          </tbody>
        </table> */}
      </div>
    )
  }
}

export default WithAuth(HOC(Boot));